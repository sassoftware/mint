#!/usr/bin/python
import pwd
import sys
import os
import time
import xmlrpclib
from os.path import dirname
from webunit import webunittest


baseDir = dirname(dirname(os.path.realpath(__file__)))

sys.path.insert(0, baseDir + '/pythonpath')
sys.path.insert(0, baseDir + '/supporting_modules/mint/raaplugins')
sys.path.insert(0, baseDir + '/supporting_modules/raa')
from conary import changelog
from conary import conarycfg
from conary import conaryclient
from conary.conaryclient import filetypes

from mint import config
from mint.client import MintClient

from rPath.rbasetup.srv import rbasetup

config.RBUILDER_GENERATED_CONFIG  = baseDir + '/config/rbuilder.conf.generated'
config.RBUILDER_CONFIG = baseDir + '/config/rbuilder.conf'


class WebHandler(webunittest.WebFetcher):
    def __init__(self, cfg):
        webunittest.WebFetcher.__init__(self)
        self.cfg = cfg
        host, port = cfg.siteHost.rsplit(':', 1)
        self.setServer(host, int(port))

    def fetchWithRedirect(self, url, params = None, code = None, **kwargs):
        if code is None: code = self.expect_codes
        else: code.extend([301, 302]) # must have these for redirection
        redirects = 0

        while True:
            try:
                if not redirects and params:
                    response = self.post(url, params, code, **kwargs)
                else:
                    response = self.get(url, code, **kwargs)
                if response.code not in (301, 302):
                    break
                redirects += 1
                if redirects >= 3:
                    raise RuntimeError, "Too many redirects"
                # Figure the location - which may be relative
                newurl = response.headers['Location']
                url = urlparse.urljoin(url, newurl)
            except webunittest.HTTPError, error:
                raise
        return response
        
    def initialize(self):
        cfg = self.cfg
        fields = { 'authCacheTimeout' : '0',
                   'hostName': cfg.hostName,
                   'siteDomainName': cfg.siteDomainName,
                   'corpSite': cfg.corpSite,
                   'defaultBranch': 'rpl:devel',
                   'namespace': 'rpl',
                   'new_username': 'admin',
                   'new_email': pwd.getpwuid(os.getuid())[0] + '@rpath.com',
                   'new_password': 'tclmeSRS',
                   'new_password2': 'tclmeSRS',
                   'allowNamespaceChange': False }
        setupPlugin = rbasetup.rBASetup(None, None, '/')
        setupPlugin.updateRBAConfig(1, 1, fields)
        # NOTE: restart needed here.

def addProjects(cfg, client, num):
    for i in range(num):
        projectId = i + 1
        shortName = 'mp%s' % projectId
        domainName = cfg.siteDomainName.split(':')[0]
        print 'creating project %d' % projectId
        client.newProject(name=shortName, hostname=shortName,
                          domainname=domainName,
                          shortname=shortName,
                          appliance='yes', version='1.0', 
                          projectLabel='conary.rpath.com@rpl:2', 
                          prodtype="Appliance")
        addPackages(cfg, client, '%s.%s' % (shortName, domainName))

def addPackages(cfg, client, repositoryName):
    conaryCfg = conarycfg.ConaryConfiguration(False)
    conaryCfg.includeConfigFile('http://' + cfg.siteHost + '/conaryrc')
    conaryCfg.user.append((repositoryName, 'admin', 'tclmeSRS'))
    cclient = conaryclient.ConaryClient(conaryCfg)
    cs = cclient.createSourceTrove('foo:source', repositoryName + '@rpl:devel',
                                   '1.0', 
                           {'foo' : filetypes.RegularFile(contents='foo\n')},
                           changeLog=changelog.ChangeLog('foo', 'bar'))
    cclient.getRepos().commitChangeSet(cs)
        

def main(argv):
    cfg = config.MintConfig()
    cfg.read(baseDir + '/config/rbuilder.conf')
    wh = WebHandler(cfg)
    print 'Initializing...'
    wh.initialize()
    print 'Done.'
    cfg = config.MintConfig()
    cfg.read(baseDir + '/config/rbuilder.conf')
    client = MintClient('http://%s:%s@%s.%s/xmlrpc-private/' % ('admin', 
                               'tclmeSRS', cfg.hostName, cfg.siteDomainName))
    #addProjects(cfg, client, 10)

if __name__ == '__main__':
    main(sys.argv)
