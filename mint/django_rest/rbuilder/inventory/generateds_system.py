#!/usr/bin/env python

#
# Generated  by generateDS.py.
#

import sys
import getopt
from string import lower as str_lower
from xml.dom import minidom
from xml.dom import Node

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def format_string(self, input_data, input_name=''):
            return input_data
        def format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def format_boolean(self, input_data, input_name=''):
            return '%s' % input_data


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class managed_system_type(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('generated_uuid', ['string64', 'xsd:token'], 0),
        MemberSpec_('local_uuid', ['string64', 'xsd:token'], 0),
        MemberSpec_('is_manageable', 'xsd:boolean', 0),
        MemberSpec_('registration_date', 'xsd:dateTime', 0),
        MemberSpec_('ssl_client_certificate', ['string8092', 'xsd:token'], 0),
        MemberSpec_('ssl_client_key', ['string8092', 'xsd:token'], 0),
        MemberSpec_('ssl_server_certificate', ['string8092', 'xsd:token'], 0),
        MemberSpec_('launching_user', ['string8092', 'xsd:token'], 0),
        MemberSpec_('target_type', ['string8092', 'xsd:token'], 0),
        MemberSpec_('target_name', ['string8092', 'xsd:token'], 0),
        MemberSpec_('target_system_id', ['string8092', 'xsd:token'], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, generated_uuid=None, local_uuid=None, is_manageable=None, registration_date=None, ssl_client_certificate=None, ssl_client_key=None, ssl_server_certificate=None, launching_user=None, target_type=None, target_name=None, target_system_id=None):
        self.generated_uuid = generated_uuid
        self.local_uuid = local_uuid
        self.is_manageable = is_manageable
        self.registration_date = registration_date
        self.ssl_client_certificate = ssl_client_certificate
        self.ssl_client_key = ssl_client_key
        self.ssl_server_certificate = ssl_server_certificate
        self.launching_user = launching_user
        self.target_type = target_type
        self.target_name = target_name
        self.target_system_id = target_system_id
    def factory(*args_, **kwargs_):
        if managed_system_type.subclass:
            return managed_system_type.subclass(*args_, **kwargs_)
        else:
            return managed_system_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_generated_uuid(self): return self.generated_uuid
    def set_generated_uuid(self, generated_uuid): self.generated_uuid = generated_uuid
    def validate_generated_uuid(self, value):
        # validate type generated_uuid
        pass
    def get_local_uuid(self): return self.local_uuid
    def set_local_uuid(self, local_uuid): self.local_uuid = local_uuid
    def validate_local_uuid(self, value):
        # validate type local_uuid
        pass
    def get_is_manageable(self): return self.is_manageable
    def set_is_manageable(self, is_manageable): self.is_manageable = is_manageable
    def get_registration_date(self): return self.registration_date
    def set_registration_date(self, registration_date): self.registration_date = registration_date
    def get_ssl_client_certificate(self): return self.ssl_client_certificate
    def set_ssl_client_certificate(self, ssl_client_certificate): self.ssl_client_certificate = ssl_client_certificate
    def validate_ssl_client_certificate(self, value):
        # validate type ssl_client_certificate
        pass
    def get_ssl_client_key(self): return self.ssl_client_key
    def set_ssl_client_key(self, ssl_client_key): self.ssl_client_key = ssl_client_key
    def validate_ssl_client_key(self, value):
        # validate type ssl_client_key
        pass
    def get_ssl_server_certificate(self): return self.ssl_server_certificate
    def set_ssl_server_certificate(self, ssl_server_certificate): self.ssl_server_certificate = ssl_server_certificate
    def validate_ssl_server_certificate(self, value):
        # validate type ssl_server_certificate
        pass
    def get_launching_user(self): return self.launching_user
    def set_launching_user(self, launching_user): self.launching_user = launching_user
    def validate_launching_user(self, value):
        # validate type launching_user
        pass
    def get_target_type(self): return self.target_type
    def set_target_type(self, target_type): self.target_type = target_type
    def validate_target_type(self, value):
        # validate type target_type
        pass
    def get_target_name(self): return self.target_name
    def set_target_name(self, target_name): self.target_name = target_name
    def validate_target_name(self, value):
        # validate type target_name
        pass
    def get_target_system_id(self): return self.target_system_id
    def set_target_system_id(self, target_system_id): self.target_system_id = target_system_id
    def validate_target_system_id(self, value):
        # validate type target_system_id
        pass
    def export(self, outfile, level, namespace_='inv:', name_='managed_system_type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='managed_system_type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='managed_system_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='managed_system_type'):
        if self.generated_uuid is not None:
            showIndent(outfile, level)
            outfile.write('<%sgenerated_uuid>%s</%sgenerated_uuid>\n' % (namespace_, self.format_string(quote_xml(self.generated_uuid).encode(ExternalEncoding), input_name='generated_uuid'), namespace_))
        if self.local_uuid is not None:
            showIndent(outfile, level)
            outfile.write('<%slocal_uuid>%s</%slocal_uuid>\n' % (namespace_, self.format_string(quote_xml(self.local_uuid).encode(ExternalEncoding), input_name='local_uuid'), namespace_))
        if self.is_manageable is not None:
            showIndent(outfile, level)
            outfile.write('<%sis_manageable>%s</%sis_manageable>\n' % (namespace_, self.format_boolean(str_lower(str(self.is_manageable)), input_name='is_manageable'), namespace_))
        if self.registration_date is not None:
            showIndent(outfile, level)
            outfile.write('<%sregistration_date>%s</%sregistration_date>\n' % (namespace_, self.format_string(quote_xml(self.registration_date).encode(ExternalEncoding), input_name='registration_date'), namespace_))
        if self.ssl_client_certificate is not None:
            showIndent(outfile, level)
            outfile.write('<%sssl_client_certificate>%s</%sssl_client_certificate>\n' % (namespace_, self.format_string(quote_xml(self.ssl_client_certificate).encode(ExternalEncoding), input_name='ssl_client_certificate'), namespace_))
        if self.ssl_client_key is not None:
            showIndent(outfile, level)
            outfile.write('<%sssl_client_key>%s</%sssl_client_key>\n' % (namespace_, self.format_string(quote_xml(self.ssl_client_key).encode(ExternalEncoding), input_name='ssl_client_key'), namespace_))
        if self.ssl_server_certificate is not None:
            showIndent(outfile, level)
            outfile.write('<%sssl_server_certificate>%s</%sssl_server_certificate>\n' % (namespace_, self.format_string(quote_xml(self.ssl_server_certificate).encode(ExternalEncoding), input_name='ssl_server_certificate'), namespace_))
        if self.launching_user is not None:
            showIndent(outfile, level)
            outfile.write('<%slaunching_user>%s</%slaunching_user>\n' % (namespace_, self.format_string(quote_xml(self.launching_user).encode(ExternalEncoding), input_name='launching_user'), namespace_))
        if self.target_type is not None:
            showIndent(outfile, level)
            outfile.write('<%starget_type>%s</%starget_type>\n' % (namespace_, self.format_string(quote_xml(self.target_type).encode(ExternalEncoding), input_name='target_type'), namespace_))
        if self.target_name is not None:
            showIndent(outfile, level)
            outfile.write('<%starget_name>%s</%starget_name>\n' % (namespace_, self.format_string(quote_xml(self.target_name).encode(ExternalEncoding), input_name='target_name'), namespace_))
        if self.target_system_id is not None:
            showIndent(outfile, level)
            outfile.write('<%starget_system_id>%s</%starget_system_id>\n' % (namespace_, self.format_string(quote_xml(self.target_system_id).encode(ExternalEncoding), input_name='target_system_id'), namespace_))
    def hasContent_(self):
        if (
            self.generated_uuid is not None or
            self.local_uuid is not None or
            self.is_manageable is not None or
            self.registration_date is not None or
            self.ssl_client_certificate is not None or
            self.ssl_client_key is not None or
            self.ssl_server_certificate is not None or
            self.launching_user is not None or
            self.target_type is not None or
            self.target_name is not None or
            self.target_system_id is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='managed_system_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.generated_uuid is not None:
            showIndent(outfile, level)
            outfile.write('generated_uuid=%s,\n' % quote_python(self.generated_uuid).encode(ExternalEncoding))
        if self.local_uuid is not None:
            showIndent(outfile, level)
            outfile.write('local_uuid=%s,\n' % quote_python(self.local_uuid).encode(ExternalEncoding))
        if self.is_manageable is not None:
            showIndent(outfile, level)
            outfile.write('is_manageable=%s,\n' % self.is_manageable)
        if self.registration_date is not None:
            showIndent(outfile, level)
            outfile.write('registration_date=%s,\n' % quote_python(self.registration_date).encode(ExternalEncoding))
        if self.ssl_client_certificate is not None:
            showIndent(outfile, level)
            outfile.write('ssl_client_certificate=%s,\n' % quote_python(self.ssl_client_certificate).encode(ExternalEncoding))
        if self.ssl_client_key is not None:
            showIndent(outfile, level)
            outfile.write('ssl_client_key=%s,\n' % quote_python(self.ssl_client_key).encode(ExternalEncoding))
        if self.ssl_server_certificate is not None:
            showIndent(outfile, level)
            outfile.write('ssl_server_certificate=%s,\n' % quote_python(self.ssl_server_certificate).encode(ExternalEncoding))
        if self.launching_user is not None:
            showIndent(outfile, level)
            outfile.write('launching_user=%s,\n' % quote_python(self.launching_user).encode(ExternalEncoding))
        if self.target_type is not None:
            showIndent(outfile, level)
            outfile.write('target_type=%s,\n' % quote_python(self.target_type).encode(ExternalEncoding))
        if self.target_name is not None:
            showIndent(outfile, level)
            outfile.write('target_name=%s,\n' % quote_python(self.target_name).encode(ExternalEncoding))
        if self.target_system_id is not None:
            showIndent(outfile, level)
            outfile.write('target_system_id=%s,\n' % quote_python(self.target_system_id).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'generated_uuid':
            generated_uuid_ = ''
            for text__content_ in child_.childNodes:
                generated_uuid_ += text__content_.nodeValue
            self.generated_uuid = generated_uuid_
            self.validate_generated_uuid(self.generated_uuid)    # validate type generated_uuid
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'local_uuid':
            local_uuid_ = ''
            for text__content_ in child_.childNodes:
                local_uuid_ += text__content_.nodeValue
            self.local_uuid = local_uuid_
            self.validate_local_uuid(self.local_uuid)    # validate type local_uuid
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'is_manageable':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', '1'):
                    ival_ = True
                elif sval_ in ('false', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.is_manageable = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'registration_date':
            registration_date_ = ''
            for text__content_ in child_.childNodes:
                registration_date_ += text__content_.nodeValue
            self.registration_date = registration_date_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ssl_client_certificate':
            ssl_client_certificate_ = ''
            for text__content_ in child_.childNodes:
                ssl_client_certificate_ += text__content_.nodeValue
            self.ssl_client_certificate = ssl_client_certificate_
            self.validate_ssl_client_certificate(self.ssl_client_certificate)    # validate type ssl_client_certificate
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ssl_client_key':
            ssl_client_key_ = ''
            for text__content_ in child_.childNodes:
                ssl_client_key_ += text__content_.nodeValue
            self.ssl_client_key = ssl_client_key_
            self.validate_ssl_client_key(self.ssl_client_key)    # validate type ssl_client_key
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ssl_server_certificate':
            ssl_server_certificate_ = ''
            for text__content_ in child_.childNodes:
                ssl_server_certificate_ += text__content_.nodeValue
            self.ssl_server_certificate = ssl_server_certificate_
            self.validate_ssl_server_certificate(self.ssl_server_certificate)    # validate type ssl_server_certificate
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'launching_user':
            launching_user_ = ''
            for text__content_ in child_.childNodes:
                launching_user_ += text__content_.nodeValue
            self.launching_user = launching_user_
            self.validate_launching_user(self.launching_user)    # validate type launching_user
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'target_type':
            target_type_ = ''
            for text__content_ in child_.childNodes:
                target_type_ += text__content_.nodeValue
            self.target_type = target_type_
            self.validate_target_type(self.target_type)    # validate type target_type
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'target_name':
            target_name_ = ''
            for text__content_ in child_.childNodes:
                target_name_ += text__content_.nodeValue
            self.target_name = target_name_
            self.validate_target_name(self.target_name)    # validate type target_name
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'target_system_id':
            target_system_id_ = ''
            for text__content_ in child_.childNodes:
                target_system_id_ += text__content_.nodeValue
            self.target_system_id = target_system_id_
            self.validate_target_system_id(self.target_system_id)    # validate type target_system_id
# end class managed_system_type


class systemInformationType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('systemName', ['string64', 'xsd:token'], 0),
        MemberSpec_('memory', 'xsd:positiveInteger', 0),
        MemberSpec_('osType', ['string64', 'xsd:token'], 0),
        MemberSpec_('osMajorVersion', ['string64', 'xsd:token'], 0),
        MemberSpec_('osMinorVersion', ['string32', 'xsd:token'], 0),
        MemberSpec_('systemType', ['string32', 'xsd:token'], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, systemName=None, memory=None, osType=None, osMajorVersion=None, osMinorVersion=None, systemType=None):
        self.systemName = systemName
        self.memory = memory
        self.osType = osType
        self.osMajorVersion = osMajorVersion
        self.osMinorVersion = osMinorVersion
        self.systemType = systemType
    def factory(*args_, **kwargs_):
        if systemInformationType.subclass:
            return systemInformationType.subclass(*args_, **kwargs_)
        else:
            return systemInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_systemName(self): return self.systemName
    def set_systemName(self, systemName): self.systemName = systemName
    def validate_systemName(self, value):
        # validate type systemName
        pass
    def get_memory(self): return self.memory
    def set_memory(self, memory): self.memory = memory
    def get_osType(self): return self.osType
    def set_osType(self, osType): self.osType = osType
    def validate_osType(self, value):
        # validate type osType
        pass
    def get_osMajorVersion(self): return self.osMajorVersion
    def set_osMajorVersion(self, osMajorVersion): self.osMajorVersion = osMajorVersion
    def validate_osMajorVersion(self, value):
        # validate type osMajorVersion
        pass
    def get_osMinorVersion(self): return self.osMinorVersion
    def set_osMinorVersion(self, osMinorVersion): self.osMinorVersion = osMinorVersion
    def validate_osMinorVersion(self, value):
        # validate type osMinorVersion
        pass
    def get_systemType(self): return self.systemType
    def set_systemType(self, systemType): self.systemType = systemType
    def validate_systemType(self, value):
        # validate type systemType
        pass
    def export(self, outfile, level, namespace_='inv:', name_='systemInformationType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='systemInformationType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='systemInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='systemInformationType'):
        if self.systemName is not None:
            showIndent(outfile, level)
            outfile.write('<%ssystemName>%s</%ssystemName>\n' % (namespace_, self.format_string(quote_xml(self.systemName).encode(ExternalEncoding), input_name='systemName'), namespace_))
        if self.memory is not None:
            showIndent(outfile, level)
            outfile.write('<%smemory>%s</%smemory>\n' % (namespace_, self.format_integer(self.memory, input_name='memory'), namespace_))
        if self.osType is not None:
            showIndent(outfile, level)
            outfile.write('<%sosType>%s</%sosType>\n' % (namespace_, self.format_string(quote_xml(self.osType).encode(ExternalEncoding), input_name='osType'), namespace_))
        if self.osMajorVersion is not None:
            showIndent(outfile, level)
            outfile.write('<%sosMajorVersion>%s</%sosMajorVersion>\n' % (namespace_, self.format_string(quote_xml(self.osMajorVersion).encode(ExternalEncoding), input_name='osMajorVersion'), namespace_))
        if self.osMinorVersion is not None:
            showIndent(outfile, level)
            outfile.write('<%sosMinorVersion>%s</%sosMinorVersion>\n' % (namespace_, self.format_string(quote_xml(self.osMinorVersion).encode(ExternalEncoding), input_name='osMinorVersion'), namespace_))
        if self.systemType is not None:
            showIndent(outfile, level)
            outfile.write('<%ssystemType>%s</%ssystemType>\n' % (namespace_, self.format_string(quote_xml(self.systemType).encode(ExternalEncoding), input_name='systemType'), namespace_))
    def hasContent_(self):
        if (
            self.systemName is not None or
            self.memory is not None or
            self.osType is not None or
            self.osMajorVersion is not None or
            self.osMinorVersion is not None or
            self.systemType is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='systemInformationType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.systemName is not None:
            showIndent(outfile, level)
            outfile.write('systemName=%s,\n' % quote_python(self.systemName).encode(ExternalEncoding))
        if self.memory is not None:
            showIndent(outfile, level)
            outfile.write('memory=%d,\n' % self.memory)
        if self.osType is not None:
            showIndent(outfile, level)
            outfile.write('osType=%s,\n' % quote_python(self.osType).encode(ExternalEncoding))
        if self.osMajorVersion is not None:
            showIndent(outfile, level)
            outfile.write('osMajorVersion=%s,\n' % quote_python(self.osMajorVersion).encode(ExternalEncoding))
        if self.osMinorVersion is not None:
            showIndent(outfile, level)
            outfile.write('osMinorVersion=%s,\n' % quote_python(self.osMinorVersion).encode(ExternalEncoding))
        if self.systemType is not None:
            showIndent(outfile, level)
            outfile.write('systemType=%s,\n' % quote_python(self.systemType).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'systemName':
            systemName_ = ''
            for text__content_ in child_.childNodes:
                systemName_ += text__content_.nodeValue
            self.systemName = systemName_
            self.validate_systemName(self.systemName)    # validate type systemName
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'memory':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (memory): %s' % exp)
                if ival_ <= 0:
                    raise ValueError('requires positiveInteger -- %s' % child_.toxml())
                self.memory = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'osType':
            osType_ = ''
            for text__content_ in child_.childNodes:
                osType_ += text__content_.nodeValue
            self.osType = osType_
            self.validate_osType(self.osType)    # validate type osType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'osMajorVersion':
            osMajorVersion_ = ''
            for text__content_ in child_.childNodes:
                osMajorVersion_ += text__content_.nodeValue
            self.osMajorVersion = osMajorVersion_
            self.validate_osMajorVersion(self.osMajorVersion)    # validate type osMajorVersion
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'osMinorVersion':
            osMinorVersion_ = ''
            for text__content_ in child_.childNodes:
                osMinorVersion_ += text__content_.nodeValue
            self.osMinorVersion = osMinorVersion_
            self.validate_osMinorVersion(self.osMinorVersion)    # validate type osMinorVersion
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'systemType':
            systemType_ = ''
            for text__content_ in child_.childNodes:
                systemType_ += text__content_.nodeValue
            self.systemType = systemType_
            self.validate_systemType(self.systemType)    # validate type systemType
# end class systemInformationType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def parse(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = managed_system_type.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="managed_system", 
##         namespacedef_='')
    return rootObj


def parseString(inString):
    doc = minidom.parseString(inString)
    rootNode = doc.documentElement
    rootObj = managed_system_type.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="managed_system",
##         namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = managed_system_type.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('#from generateds_system import *\n\n')
##     sys.stdout.write('import generateds_system as model_\n\n')
##     sys.stdout.write('rootObj = model_.managed_system(\n')
##     rootObj.exportLiteral(sys.stdout, 0, name_="managed_system")
##     sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

