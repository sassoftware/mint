<?xml version='1.0' encoding='UTF-8'?>
<plain xmlns:py="http://purl.org/kid/ns#">
# vim: ts=4 sw=4 expandtab ai
#
# Copyright (c) 2008 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#
# HOW TO USE THIS RECIPE
#
# This appliance group recipe was automatically generated when this
# appliance product was created in rBuilder.  An appliance group recipe 
# is the instructions used to assemble the appliance.  Modify this recipe 
# to add the packages and components you need to complete the appliance
# product.
#
# Appliance group recipes, as with other Conary packages, are Python
# code and should follow proper Python syntax.  For example, each section
# is delimited by indenting, and indentations should be in four-space
# increments (no tabs).  The first line of this autogenerated recipe
# indicates tab settings for the VI or VIm text editors.
#
# The main modification required to this recipe is the addition of
# r.add() lines to include additional packages within the addPackages
# definition.  This auto-generated recipe contains some examples that
# should be replaced by your desired packages and components.
#
# Also, if desired, add scripts that should run either before or after updates 
# to perform certain actions on the appliance.  There is an example of a
# post-update script in this auto-generated group.
#
# See the sections marked "CUSTOMIZE" for typical areas of recipe development.

loadSuperClass('group-appliance=conary.rpath.com@rpl:1')
class Group${projectName.capitalize()}Dist(ApplianceGroupRecipe):
    name = '${groupName}'

    # CUSTOMIZE:  VERSION NUMBER
    # This is the version of your appliance, and the original 
    # auto-generated recipe uses the version specified when the 
    # product was created in rBuilder.
    version = '1'
    # END CUSTOMIZE
    
    def addPackages(r):
        '''
        The following are some tasks you can perform in this section of
        the recipe:
        
        Add a Package -- 
           Use r.add() to add packages and components specifically
           for this appliance.  For example, to add "foundation-config" 
           that is built specifically for this appliance (on the same
           label), use the following line:
           r.add('foundation-config')
        
        Replace a Package --
           Use r.replace() to replace any package from the appliance 
           platform resource, which automatically builds in just enough 
           operating system for the appliance.  This is useful if you 
           shadow or derive a package from the appliance platform for 
           the appliance product label, typically to customize its features.  
           For example, if you are replacing 'sample-package' from the 
           appliance platform with a version built specifically for this 
           appliance, use the following:
           r.replace('sample-package')
        
        Remove unwanted components --
           Use r.remove() to remove components from the appliance platform
           or other packages.  For example, remove rAPA plugins not required
           for appliance administration, such as the Flip-flip Update plugin:
           r.remove('raa-plugin-flipflop')

        Add a Post-update Script --
           Use r.addPostUpdateScript to add a script that will execute after 
           applying the next update to the group.  The following syntax shows
           an example script:
           r.addPostUpdateScript(
              contents = '#!/bin/bash\n/sbin/service foundation-config condrestart\n')
        '''

</plain>
