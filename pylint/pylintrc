[BASIC]
# Regular expression which should only match correct class names
class-rgx=_?[A-Z][a-zA-Z0-9]+$

# Regular expression which should only match correct function names
function-rgx=[a-z_][a-zA-Z0-9]*$

# Regular expression which should only match correct function names
name-rgx=[a-z_][a-zA-Z0-9]*$

# Regular expression which should only match correct method names
method-rgx=([a-z_][a-zA-Z0-9]*)|(__[a-z][a-zA-Z0-9]+__)$

# Regular expression which should only match correct argument names
argument-rgx=[a-z][a-zA-Z0-9]*$

# Regular expression which should only match correct variable names
variable-rgx=[a-z][a-zA-Z0-9]*$

# Attributes can be camel case too
attr-rgx=[a-z_][a-zA-Z0-9_]{2,30}$

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,n,v,f,ex,Run,_,db,cu,__




[REPORTS]
files-output=yes
reports=yes
include-ids=yes

[MESSAGES CONTROL]
# CO103: Invalid name "optionNameMap" (should match (([A-Z_][A-Z1-9_]*)|(__.*__))$)
# C0111: Missing docstring
# C0202: 36:EnumOption.__new__: Class method should have "cls" as first argument
# C0301: Line too long
# C0302: Too many lines in module
# C0322: Operator not preceded by a space
# C0323: Operator not followed by a space
# C0324: Comma not followed by a space
# E1101: Has no attribute x
# R0201: method could be a function
# R0902: Too many instance attributes
# R0903: Too few public methods
# R0904: Too many public methods
# R0911: Too many returns
# R0912: Too many branches
# R0913: Too many arguments
# R0914: Too many local variables
# R0915: Too many statements
# W0102: Dangerous default value
# W0142: Used * or ** magic
# W0201: defined outside __init__
# W0212: Access to a protected member
# W0221: Arguments differ from overridden method
# W0231: __init__ method from base class dict is not called
# W0311: Bad indentation
# W0312: Too many lines in module
# W0321: More than one statement on a single line
# W0401: Wildcard import
# W0402: Use of a deprecated module
# W0511: FIXME
# W0603: Using global statement
# W0604: Using the global statement at the module level
# W0612: Unused variable x
# W0613: Unused argument x
# W0621: Redefining x from outer scopt
# W0622: Redefining built-in 'id'
# W0702: No exception type(s) specified
# W0703: Catch "Exception"
# W0704: Except doesn't do anything



disable-msg=C0103, C0111, C0202, C0301, C0302, C0322, C0321, C0323, C0324, E1101, R0201, R0902, R0903, R0904, R0911, R0912, R0913, R0914,R0915, W0102, W0142, W0201, W0211, W0212, W0221, W0231, W0311, W0312, W0401, W0402, W0511, W0603, W0604, W0612, W0613, W0621, W0622, W0702, W0703, W0704 

[MASTER]
#load-plugins=pylint_plugins.epydoc_checker
