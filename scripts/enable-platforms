#!/usr/bin/python
#
# Copyright (c) 2009 rPath, Inc.
#
# All Rights Reserved
#
import logging
import os
import pwd
import sys
import traceback

from mint import config
from mint import users
from mint.db import database
from mint.rest.db import authmgr
from mint.rest.db import database as restDb

log = logging.getLogger(__name__)

class NullHandler(logging.Handler):
    def emit(self, record):
        pass

def _chown(root, uid, gid):
    os.chown(root, uid, gid)
    for root, dirs, paths in os.walk(root):
        for path in paths:
            os.chown(os.path.join(root, path), uid, gid)
        for dir in dirs:
            _chown(os.path.join(root, dir), uid, gid)

def enablePlatforms():
    cfg = config.MintConfig()
    cfg.read(config.RBUILDER_CONFIG)

    db = database.Database(cfg)
    authToken = (cfg.authUser, cfg.authPass)
    mintAdminGroupId = db.userGroups.getMintAdminId()
    cu = db.cursor()
    cu.execute("SELECT MIN(userId) from userGroupMembers "
               "WHERE userGroupId = ?", mintAdminGroupId)
    ret = cu.fetchall()
    userId = ret[0][0]

    mintAuth = users.Authorization(
                username=cfg.authUser, 
                token=authToken,
                admin=True,
                userId=userId)
    auth = authmgr.AuthenticationManager(cfg, db)
    auth.setAuth(mintAuth, authToken)

    rdb = restDb.Database(cfg, db, auth)

    platforms = rdb.getPlatforms()

    enabledPlatforms = []

    for platform in platforms.platforms:
        if not platform.enabled:
            try:
                platform.enabled = True
                rdb.updatePlatform(platform.platformId, platform)
                enabledPlatforms.append(platform.label)

                if platform.label in cfg.configurablePlatforms:
                    uid, gid = pwd.getpwnam('apache')[2:4]
                    _chown('/srv/rbuilder/repos/%s' % platform.repositoryHostname, 
                        uid, gid)
            except Exception, e:
                log.error("Exception while enabling platform %s: %s" % (platform.label, e))

    return enabledPlatforms            

if __name__ == '__main__':
    print "Enabling platforms...", 
    log.addHandler(NullHandler())
    try:
        enabledPlatforms = enablePlatforms()
        if enabledPlatforms:
            print ', '.join(enabledPlatforms)
        else:
            print "No platforms to enable."
    except Exception, e:
        tb = sys.exc_info()[2]
        traceback.print_tb(tb)
        log.exception(tb)
        sys.exit("Failed enabling platforms: %s" % e)

