#!/bin/sh
# Helper script to install a jobserver root and set up
# a little bit of the chroot environment.

MYNAME=`basename $0`

function usage() {
    echo "Error: $1" >&2
    cat - <<EOUSAGE >&2

usage: $MYNAME <trovespec of job server root> [--extra-fstab]

   --extra-fstab   add three additional bind mounts for /srv/rbuilder/images/
                      and /srv/rbuilder/templates/

EOUSAGE
    exit 1
}

if [ $# -lt 1 ]; then
    usage "Not enough arguments: $0 $*"
fi

if [ $UID != 0 ]; then
    usage "This script must be run as root"
fi

troveSpec=$1

if [ -f $troveSpec ]; then
    upstreamVer=$(echo $troveSpec | sed -r 's/.*jobserver-([0-9\.]+)\.[A-z]+.*/\1/g')

    echo "Installing chroot from tarball: $upstreamVer"
    ROOT=/srv/rbuilder/jobserver/$upstreamVer/
    if [ -d $ROOT ]; then
        echo "Chroot already exists, exiting." >&2
        exit 0
    fi

    mkdir -p $ROOT
    tar zxf $troveSpec -C $ROOT
else
    # parse a full trove spec from a partial spec by calling
    # conary rq on the partial. also extract an upstream version
    # from the resulting full trove spec.
    fullTroveSpec=$(conary rq "$troveSpec" --full-versions)
    upstreamVer=$(python -c "
from conary.conaryclient import cmdline
from conary import versions
print str(versions.VersionFromString(cmdline.parseTroveSpec(\"$fullTroveSpec\")[1]).trailingRevision()).split('-')[0]
    ")

    ROOT=/srv/rbuilder/jobserver/$upstreamVer/
    if [ -d $ROOT ]; then
        echo "Chroot already exists, exiting." >&2
        exit 0
    fi
    echo "Installing chroot from repository: $upstreamVer" 
    conary update --root $ROOT "$troveSpec"
    if [ $? != 0 ]; then
        echo "Software installation failed" >&2
        exit 1
    fi
fi

if [ -d $ROOT/srv/mint ]; then
    echo "Link $ROOT/srv/mint to $ROOT/srv/rbuilder (backwards compatibility)"
    (cd $ROOT/srv; ln -s mint rbuilder)
fi

echo "Creating mtab and device nodes"
touch $ROOT/etc/mtab
mknod $ROOT/dev/random c 1 8
mknod $ROOT/dev/urandom c 1 9
chmod 777 $ROOT/dev/shm
mkdir -p $ROOT/dev/pts
mkdir -p $ROOT/srv/rbuilder/finished-images/
mkdir -p $ROOT/srv/rbuilder/entitlements/
mkdir -p $ROOT/srv/rbuilder/config/


cp /etc/fstab /etc/fstab.backup
COMMENT=\#JSROOT$upstreamVer
echo "Modifying /etc/fstab -- saving backup to /etc/fstab.backup"
echo "none $ROOT/proc proc defaults 0 0 $COMMENT" >> /etc/fstab
for x in '/dev/pts' '/srv/rbuilder/finished-images' '/srv/rbuilder/changesets' '/srv/rbuilder/entitlements' '/srv/rbuilder/config'; do
    echo -e "$x\\t$ROOT$x\\tnone\\tbind\\t0\\t0 $COMMENT" >> /etc/fstab
done

if [ "$2" = '--extra-fstab' ]; then
    echo /export/rbuilder/local-images              $ROOT/srv/rbuilder/images       none    bind    0 0 $COMMENT >> /etc/fstab
    echo /srv/rbuilder/templates                    $ROOT/srv/rbuilder/templates    none    bind    0 0 $COMMENT >> /etc/fstab
fi

echo "Copying network configuration files to chroot"
for x in '/etc/nsswitch.conf' '/etc/hosts' '/etc/resolv.conf'; do
    cp $x $ROOT/etc/
done

echo "Creating cleanup script additions (logrotate, tmpwatch)"

# Install logrotate job in logrotate.d for chroot
cat <<EOLOGROTATE > /etc/logrotate.d/rbuilder-jobserver-$upstreamVer
$ROOT/srv/rbuilder/logs/job-server.log
$ROOT/srv/rbuilder/logs/profiling {
    missingok
    notifempty
    compress
    compresscmd /usr/bin/bzip2
    size 10M
}
EOLOGROTATE

# Install tmpwatch job in cron.daily for chroot
# NOTE: cached changesets are handled in /etc/cron.daily/rbuilder.tmpwatch
#       as they are bind-mounted.
cat <<EOTMPWATCH > /etc/cron.daily/rbuilder-jobserver-$upstreamVer.tmpwatch
# tmpwatch for rBuilder appliance (chrooted jobserver $upstreamVer)

# dump temporary images after two days
/usr/sbin/tmpwatch 48 $ROOT/srv/rbuilder/images

# dump joboutput (debug) data after two weeks
/usr/sbin/tmpwatch 336 $ROOT/srv/rbuilder/logs/joboutput

# cleanup /tmp
/usr/sbin/tmpwatch 48 $ROOT/tmp

# cleanup /var/tmp
/usr/sbin/tmpwatch 48 $ROOT/var/tmp
EOTMPWATCH
chmod 754 /etc/cron.daily/rbuilder-jobserver-$upstreamVer.tmpwatch

echo "Activating new bind mounts"
mount -a

/sbin/service multi-jobserver start
