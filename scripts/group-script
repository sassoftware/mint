#!/bin/sh
#
# Copyright (c) 2008 rPath, Inc.
# All rights reserved.
#
# This script is executed from the group after each update. It migrates
# the mint database and all repository databases.
#
# NOTE: In the interests of avoiding cruft which no-one can explain 3
# years from now, all transitional migrations, workarounds, and anything
# that will not otherwise be self-explanatory in the future should be
# marked with a comment indicating when and for what version it was
# added as well as any relevant issue IDs.

. /etc/sysconfig/pgsql/postgresql-rbuilder
export PGDATA PGPORT

scriptdir=`dirname $0`

if [[ `awk '{print $2}' /proc/mounts | grep -c ^/proc$` > 1 ]]
then
    # If /proc appears to be mounted more than once, then it means we're
    # chrooted. It manifests itself this way as the actual path is
    # outside the chroot and thus can't be addressed.
    is_chrooted=1
fi

check_apache() {
    pidof httpd > /dev/null 2>&1
}

shutdown_apache() {
    if check_apache; then
        service httpd stop
        for i in $(seq 30); do
            if check_apache; then
                sleep 1
            else
                break
            fi
        done
        if check_apache; then
            echo "WARNING: httpd still running, killing httpd"
            killall httpd > /dev/null 2>&1
            if check_apache; then
                echo "WARNING: httpd *still* running, sending httpd signal 9"
                killall -9 httpd > /dev/null 2>&1
                if check_apache; then
                    echo "WARNING: failed to shutdown the Apache (httpd) service"
                fi
            fi
        fi
    fi
}

die() {
    echo "ERROR:" "$@"
    exit 1
}

# Shut down apache, if it's running
shutdown_apache

# If not chrooted, stop cron, to prevent bad things from happening while we're
# migrating (RBL-7973)
[ -e /var/lock/subsys/crond ] && service crond stop

# Shut down postgres, and migrate to the latest major version if required.
# Then start it and wait for it to return.
if [ "x$is_chrooted" == "x1" ]
then
    # Initial install
    updateargs="--init"
fi
"$scriptdir"/postgres-auto-update $updateargs \
    || die "Migration failed, check /var/log/rbuilder/scripts.log"

service pgbouncer restart

# Create rbuilder user for initial setup OR give it createdb permissions to fix
# up an earlier mistake. -- 5.5.0 2009-11-16
createuser -SdRU postgres rbuilder &>/dev/null || \
    psql -U postgres -qc 'ALTER ROLE rbuilder CREATEDB'

# Migrate the mint database (or create it if it doesn't exist)
createlang -U postgres plpgsql template1 &>/dev/null
createdb -U postgres --encoding=UTF8 --owner=rbuilder mint &>/dev/null

"$scriptdir"/rbuilder-database --migrate \
    || die "Failed to migrate the rBuilder database"
chown -f apache:apache /srv/rbuilder/data/db /srv/rbuilder/repos/* 2>/dev/null
rm -f /srv/rbuilder/data/platformName.cache

# jabberd database
createuser -SDRU postgres jabberd &>/dev/null
createdb -U postgres --encoding=UTF8 --owner=jabberd jabberd &>/dev/null && \
    psql -U jabberd -d jabberd -Xqf /usr/share/rbuilder/jabberd/db-setup.pgsql

# rMake database
createuser -SDRU postgres rmake &>/dev/null
createdb -U postgres --encoding=UTF8 --owner=rmake rmake &>/dev/null


# Migrate the mint config
"$scriptdir"/migrate-config --migrate || die "Failed to migrate the rBuilder configuration file"
chown apache:apache /srv/rbuilder/config/rbuilder-generated.conf

# Migrate all conary repositories
"$scriptdir"/migrate-all-projects

# raa-web user needs to be in apache group so that rbuilder-generated is readable by rapa
usermod -a -G apache raa-web

# Create a project for rMake to use as a repository.
sudo -u apache "$scriptdir"/rmake-setup
RMAKE_EXISTED=$?

# Make sure the site authorization is up to date.
"$scriptdir"/refresh-auth

# Set up external repositories for the platforms we support
# this can't be run as apache as it needs root access to read the
# entitlement dir
"$scriptdir"/init-extproducts

# make sure that the old rapa plugin .pyc files are not blocking us
# from finding files in /usr/lib64/raa. rapa should restart at the end of 
# the update. (Due to unowned .pyc files pre rapa 3.1.0)
if [ `uname -m` = "x86_64" ]; then
    rm -rf /usr/lib/raa/rPath/
fi

# Primary migration is done, exit maintenance mode now since some scripts need
# to talk to local repositories.
rm -f /srv/rbuilder/run/maintenance.lock

# Generate rMake certificates IFF we're not chrooted; otherwise we
# might end up sticking them pre-generated in the ISOs which would be
# very bad.
#   -- 5.0.0 - 2008-12-01
if [ "x$is_chrooted" == "x" ]
then
    "$scriptdir"/generate-certs.sh \
        || die "Failed to generate certificates"

    # Start apache with new certificates.
    service httpd start
else
    echo Skipping certificate generation due to chrooting
fi

# If rmake repo didn't exist, this must be a new install, so only touch the
# platforms file.  If it did exist, it must be an update, so only run the
# script if the platforms file doesn't exist.
PLATFORMS_FILE=/srv/rbuilder/data/enable_platforms
if [ "$RMAKE_EXISTED" = "0" ]
then
    touch "$PLATFORMS_FILE"
elif [ ! -e "$PLATFORMS_FILE" ]
then
    "$scriptdir"/enable-platforms
    touch "$PLATFORMS_FILE"
fi

### Extra Steps

# Re-add postgresql initscripts so that it picks up a new chkconfig.d entry
#   -- pre-4.1.0 - 2008-05-16
for initscript in postgresql postgresql-rbuilder
do
    if [ -f /etc/init.d/$initscript ]
    then
        /sbin/chkconfig --del $initscript
        /sbin/chkconfig --add $initscript
    fi
done


# Restart rMake after update + cert generation. This also straightens things out
# for the first update after the messagebus was split.
#   -- 5.0.0 - 2008-12-01
#   -- 5.5.0 - 2009-11-09
if [ "x$is_chrooted" == "x" ]
then
    # Stop everything
    service jobmaster condstop
    service mcp-dispatcher condstop
    [ -e /var/lock/subsys/rmake-node ] && service rmake-node stop
    service rmake stop
    service rmake-messagebus condstop
    [ -e /var/lock/subsys/rmake3-node ] && service rmake3-node stop
    [ -e /var/lock/subsys/rmake3 ] && service rmake3 stop
    # Start everything
    service rmake3 start
    service rmake3-node start
    service rmake-messagebus start
    service rmake start
    service rmake-node start
    service mcp-dispatcher start
    service jobmaster start

    # Create initial platforms
    echo Updating platforms ...
    $scriptdir/create-platforms

    echo Updating branch/stage information ...
    $scriptdir/repository-sync

    # Start cron back (RBL-7973)
    service crond start

    # Restart the authentication service
    service rbuilder-authn restart
fi

# Fix notifications with a bad GUID
#   -- 5.1.1 - 2009-04-24
sed -i -e 's,contexts/default/default,contexts/default,' \
    /srv/rbuilder/notices/global/default/*/content &>/dev/null


# Shut down postgres if chrooted
if [ "x$is_chrooted" == "x1" ]
then
    service pgbouncer stop
    service postgresql-rbuilder stop

    echo "Waiting for postgres to stop"
    retries=4
    while true
    do
        if [ ! -f "$PGDATA/postmaster.pid" ]
        then
            break
        elif [[ "$retries" -ne 0 ]]
        then
            retries=$(( $retries - 1 ))
            sleep 4
        else
            echo "Giving up and killing the pidfile"
            rm -f "$PGDATA/postmaster.pid"
            break
        fi
    done
fi


exit 0
