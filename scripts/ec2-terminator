#!/usr/bin/python

import os
import sys

from mint import config
from mint import scriptlibrary
from mint.client import MintClient

from conary.lib import log

log.setVerbosity(log.DEBUG)

class EC2Terminator(scriptlibrary.SingletonScript):

    cfg = config.MintConfig()
    cfg.read(config.RBUILDER_CONFIG)
    logPath = os.path.join(cfg.logPath, 'ec2-terminator.log')
    del cfg

    def handle_args(self):
        if (len(sys.argv) != 2):
            return False

        self.xmlrpcUrl = sys.argv[1]
        return True

    def usage(self):
        print >> sys.stderr, "usage: ec2-terminator <private_xmlrpc_url>"

    def action(self):
        self.log.debug("EC2 Terminator starting")

        mintCfg = config.MintConfig()
        mintCfg.read(config.RBUILDER_CONFIG)

        client = MintClient(self.xmlrpcUrl)
        try:
            instancesKilled = [client.getLaunchedAMI(x) for x in \
                    client.terminateExpiredAMIInstances()]
        except Exception, e:
            self.log.error(str(e))
            return 1

        for i in instancesKilled:
            ami = client.getBlessedAMI(i.blessedAMIId)
            self.log.info("Killed instance %s (image %s, IP %s)" % \
                    (i.ec2InstanceId, ami.ec2AMIId, i.launchedFromIP))

        return 0

    def cleanup(self):
        self.log.debug("EC2 Terminator exiting")


if __name__ == "__main__":
    xtrmntr = EC2Terminator()
    os._exit(xtrmntr.run())
