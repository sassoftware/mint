#!/usr/bin/python
from os.path import dirname
import os
import socket
import sys
from conary.lib import util

def require(package, label):
    rc = os.system('conary q %s' % package)
    if rc:
        raise RuntimeError('%s not installed - install %s=%s' % (package, package, label))


def checksanity(buildFlex=False):
    require('yui', 'contrib.rpath.org@rpl:1')
    if buildFlex:
        require('flexlibs', 'private.rb.rpath.com@rpl:flexlibs-1-devel')
        require('flex-sdk', 'private.rb.rpath.com@rpl:1')

def get_options(argv):
    import optparse
    usage = '%prog [options] directory-to-install'
    op = optparse.OptionParser(usage=usage)
    op.add_option("--host",
                  dest = "host", default = None,
                  help = "use a different host.domain")
    hgDir = dirname(dirname(dirname(os.path.realpath(__file__))))
    op.add_option("--hgdir",
              dest = "hgdir", default = hgDir,
              help = "specify common hg directory (with checkouts as subdirs)")
    op.add_option("--build-flex",
              action="store_true", default=False,
              dest = "buildFlex",
              help = "Whether to build the flex components")
    return op.parse_args()


def main(argv):
    options, args = get_options(argv)
    if args[0][0] != '/':
        targetDir = os.path.join(os.getcwd(), args[0])
    else:
        targetDir = args[0]
    checksanity(buildFlex=options.buildFlex)
    hgDir = options.hgdir

    if 'mint' in targetDir:
        print >>sys.stderr, "newserver doesn't work inside of a mint checkout.  Please remove 'mint' from the dirname.   Send all complaints to '/dev/fixityourself'"

    hostname = options.host
    if not hostname:
        hostname = socket.gethostbyaddr('127.0.0.1')[0]
    print 'Using host: %s' % hostname
    hostname, domainname = hostname.split('.', 1)
    destDir = '' + targetDir
    mintDir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
    modulePath = targetDir + '/supporting_modules'
    pythonPath = targetDir + '/pythonpath'
    oldRootLen = len(mintDir + '/server_template')
    if not os.path.exists(destDir):
        os.makedirs(destDir)
    for root, dirs, fileNames in os.walk(mintDir + '/server_template'):
        newRoot = destDir + root[oldRootLen:]
        for dir in dirs:
            oldPath = root + '/' + dir
            newPath = newRoot + '/' + dir
            if os.path.exists(newPath):
                continue
                #util.rmtree(newPath)
            if os.path.islink(oldPath):
                link = os.readlink(oldPath)
                os.symlink(link, newPath)
            elif not os.path.exists(newPath):
                os.mkdir(newPath)
        for name in fileNames:
            oldPath = root + '/' + name
            newPath = newRoot + '/' + name
            if os.path.lexists(newPath):
                os.remove(newPath)
            if os.path.islink(oldPath):
                link = os.readlink(oldPath)
                os.symlink(link, newPath)
                continue
            cmd = ('sed -e "s,@SERVER_PATH@,%(serverPath)s,g"'
                      ' -e "s,@PORT@,%(port)s,g"'
                      ' -e "s,@SSLPORT@,%(sslPort)s,g"'
                      ' -e "s,@HOST@,%(host)s,g"'
                      ' -e "s,@DOMAIN@,%(domain)s,g"'
                      ' -e "s,@TARRPC_PORT@,%(tarPort)s,g"'
                      ' -e "s,@PYTHONPATH@,%(pythonPath)s,g"'
                      ' -e "s,@CONARY_PATH@,%(conaryDir)s,g"'
                      ' -e "s,@MINT_PATH@,%(mintDir)s,g"'
                      ' %(oldPath)s > %(newPath)s' \
                          % { 'serverPath' : targetDir,
                              'port'       : 8000,
                              'sslPort'    : 8001,
                              'tarPort'    : 8002,
                              'pythonPath' : targetDir + '/pythonpath',
                              'conaryDir'  : modulePath + '/conary',
                              'mintDir'    : modulePath + '/mint',
                              'newPath'    : newPath,
                              'oldPath'    : oldPath,
                              'host'       : hostname,
                              'domain'     : domainname,
                              })
            os.system(cmd)
            os.chmod(newPath, os.stat(oldPath).st_mode)
    sys.path.insert(0, mintDir)
    sys.path.insert(0, os.environ['TESTUTILS_PATH'])
    loadModules(mintDir, destDir, hgDir, buildFlex=options.buildFlex)
    loadDatabase(targetDir)
    if options.buildFlex:
       linkCatalogClient(targetDir)

def loadModules(mintDir, destDir, hgDir, buildFlex=False):
    from mint_test import modules
    from testrunner import loadmodules
    if buildFlex:
        allModules = modules.modules + modules.flexModules
    else:
        allModules = modules.modules
    loadmodules.loadModules(allModules, destDir, shouldClone=True,
                            searchPath = [hgDir])

def loadDatabase(targetDir):
    scriptsDir = os.path.dirname(__file__)
    cmd = 'cd %s; cp rbuilder-database rbuilder_database.py; PYTHONPATH=%s/pythonpath python -c "import rbuilder_database;  rbuilder_database.RBuilderDatabase(aLockPath=\'%s/repos/run\').run();" --migrate -c %s/config/rbuilder.conf' % (scriptsDir, targetDir, targetDir, targetDir)
    os.system(cmd)

def linkCatalogClient(targetDir):
    for file, newFile, dir in (('cloudConfig', 'cloudConfig', 'admin/'), 
                      ('iCloudsLayout', 'catalogLayout', ''),
                      ('iClouds', 'cloudCatalog', '')):
        targetPath = '/pythonpath/mint/web/templates/%s%s.kid' % (dir, newFile)
        origPath = '/supporting_modules/catalog-client/iclouds-build/bin/assets/templates/%s.kid' % file
        if os.path.lexists(targetDir + targetPath):
            os.remove(targetDir + targetPath)
        os.symlink(targetDir + origPath, targetDir + targetPath)
    for file in ('iClouds', 'history', 'AC_OETags'):
        targetPath = '/static/apps/mint/javascript/%s.js' % file
        origPath = '/supporting_modules/catalog-client/iclouds-build/bin/assets/javascript/%s.js' % file
        if os.path.lexists(targetDir + targetPath):
            os.remove(targetDir + targetPath)
        os.symlink(targetDir + origPath, targetDir + targetPath)
    for file in ('history',):
        targetPath = '/static/apps/mint/css/%s.css' % file
        origPath = '/supporting_modules/catalog-client/iclouds-build/bin/assets/css/%s.css' % file
        if os.path.lexists(targetDir + targetPath):
            os.remove(targetDir + targetPath)
        os.symlink(targetDir + origPath, targetDir + targetPath)


if __name__ == '__main__':
    main(sys.argv)
