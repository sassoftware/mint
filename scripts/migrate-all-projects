#!/usr/bin/python
#
# Copyright (c) SAS Institute Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


import logging
import os
import optparse
import sys
import time
import traceback

from mint import config
from mint.lib import scriptlibrary
from mint.db import repository
from conary import dbstore
from conary.lib import tracelog, formattrace, util
from conary.server import schema


class MigrateAllProjects(scriptlibrary.SingletonScript):
    cfgPath = config.RBUILDER_CONFIG
    logFileName = "conary-db-migration.log"
    options = None
    args = None
    oldLogMe = tracelog.logMe
    currentProjectName = None

    def _newLogMe(self, level, *args):
        """
        This is used to hijack the method that the migration scripts use
        in conary.lib.tracelog. We want to format things our way and have
        it printed out to stderr as INFO messages to get meaningful
        messages inside of rAPA.
        """
        if level <= 2:
            if len(args):
                msgPrefix = self.currentProjectName and \
                        "[%s] " % self.currentProjectName or ""
                self.log.info(msgPrefix + \
                        " ".join([str(x) for x in args]))

    def handle_args(self):
        usage = "%prog"
        op = optparse.OptionParser(usage=usage)
        op.add_option("-c", "--rbuilder-config",
                dest = "cfgPath", default = None,
                help = "use a different configuration file")
        (self.options, self.args) = op.parse_args()

        # read the configuration
        self.cfg = config.MintConfig()
        if self.options.cfgPath:
            self.cfg.read(self.options.cfgPath)
        else:
            self.cfg.read(self.cfgPath)
        if self.logFileName:
            self.logPath = os.path.join(self.cfg.logPath, self.logFileName)
        return True

    def action(self):
        scriptlibrary.setupScriptLogger(self.logPath,
                consoleLevel=logging.INFO)
        self.log = scriptlibrary.getScriptLogger()

        self.log.info("Migrating Conary repository databases...")

        # hijack the logMe method
        tracelog.logMe = self._newLogMe

        db = dbstore.connect(self.cfg.dbPath, driver = self.cfg.dbDriver)
        repoManager = repository.RepositoryManager(self.cfg, db, bypass=True)
        cu = db.cursor()

        handles = []
        cu.execute("SELECT projectId FROM Projects")
        for projectId, in cu:
            handle = repoManager.getRepositoryFromProjectId(projectId)
            if not handle.hasDatabase:
                continue
            handles.append(handle)
        total = len(handles)

        errorLogFiles = {}
        errors = 0
        for n, handle in enumerate(handles):
            self.currentProjectName = handle.shortName
            self.log.info('[%s] Migrating (%d of %d)',
                    self.currentProjectName, n + 1, total)
            self.log.info('[%s] Using database %r',
                    self.currentProjectName, handle.dbTuple)

            try:
                reposDb = handle.getReposDB()
                schema.loadSchema(reposDb, doMigrate=True)
            except:
                errors += 1
                exc, e, tb = sys.exc_info()
                if str(e).startswith('Unknown database'):
                    self.log.error('[%s] Database is missing; continuing.',
                            self.currentProjectName)
                    continue
                if str(e) == 'unable to open database file':
                    self.log.error('[%s] Could not open database; continuing.',
                            self.currentProjectName)
                    continue
                fn = os.path.join(self.cfg.logPath, 'migration-errors',
                        self.currentProjectName + '.log')
                util.mkdirChain(os.path.dirname(fn))
                errorLog = open(fn, 'a')
                errorLog.write("Unhandled exception from rBuilder Migration script\n")
                errorLog.write("Time of occurrence: %s (GMT)\n\n" % \
                        time.asctime(time.gmtime()))
                errorLog.write("%s: %s\n\nTraceback (most recent call last):\n" \
                        % (exc, str(e)))
                traceback.print_tb(tb, file = errorLog)
                errorLog.write("\nFull stack:\n\n")
                formattrace.formatTrace(exc, e, tb, stream = errorLog,
                        withLocals = True)
                errorLog.close()
                self.log.error("[%s] Failed to migrate: %s" % (self.currentProjectName,
                    str(e)))
                self.log.error("[%s] Full traceback appended to: %s" % \
                        (self.currentProjectName, fn))
                errorLogFiles[self.currentProjectName] = fn

            self.log.info("[%s] Completed (%d of %d)",
                    self.currentProjectName, n + 1, total)

            repoManager.close()

        if errors:
            self.log.error("Conary repository migration completed with errors.")
            # some rBuilder's have large numbers of projects. repeat the errors
            # at the end for easier reference
            self.log.error("Tracebacks were appended to the following files:")
            for projectName, logFileName in errorLogFiles.iteritems():
                self.log.error("[%s] %s" % \
                        (projectName, logFileName))
            return 1

        self.log.info("Conary repository migration complete.")
        return 0

if __name__ == "__main__":
    mig = MigrateAllProjects()
    os._exit(mig.run())
