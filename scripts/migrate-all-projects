#!/usr/bin/python
#
# Copyright (c) 2005-2007 rPath, Inc.
#
# All rights reserved
#

import os, sys

from mint import config
from mint import maintenance
from mint.projects import transTables
from conary import dbstore
from conary.lib import tracelog
from conary.server import schema

cfg = config.MintConfig()
cfg.read(config.RBUILDER_CONFIG)

# check a few important things
ec = os.system('/sbin/service httpd status > /dev/null')
isRunningHttpd = bool((ec >> 8) == 0)
isRunningInMaintenanceMode = (maintenance.getMaintenanceMode(cfg)==maintenance.LOCKED_MODE)

if isRunningHttpd and not isRunningInMaintenanceMode:
    print >> sys.stderr, """
rBuilder repositories are not locked. You must place the site in
maintenance mode or shut down the Apache Web Server (httpd) before
continuing."""
    sys.exit(1)

print "Migrating Conary repository databases for all projects..."

db = dbstore.connect(cfg.dbPath, driver = cfg.dbDriver)
cu = db.cursor()

# get repname map used to help find the local Conary repository
# for external locally-mirrored projects
repnamemap = {}
cu.execute("SELECT fromname, toname FROM RepNameMap")
for fromName, toName in cu.fetchall():
    fromName = fromName.translate(transTables[cfg.reposDBDriver])
    toName = toName.translate(transTables[cfg.reposDBDriver])
    repnamemap[fromName] = toName

# get all projects which are not external OR are external, but are locally mirrored
cu.execute("""SELECT hostname, domainname FROM Projects WHERE
              external = 0 or EXISTS(SELECT * FROM InboundMirrors 
              WHERE Projects.projectId=InboundMirrors.targetProjectId)""")

tracelog.initLog(level=2)

dbNames = [(x[0] + "." + x[1]).translate(transTables[cfg.reposDBDriver]) for x in cu.fetchall()]

errors = 0
for dbName, count in zip(dbNames, range(1,len(dbNames)+1)):
    # lookup things in the repnamemap to resolve external local
    # mirrors
    actualDbName = repnamemap.get(dbName, dbName)
    try:
        db_path = cfg.reposDBPath % actualDbName
        reposDb = dbstore.connect(db_path, driver = cfg.reposDBDriver)
        print 'Migrating database at %s' % db_path
        schema.loadSchema(reposDb, doMigrate=True)
    except:
        errors += 1
        e = sys.exc_info()[1]
        if str(e).startswith('Unknown database'):
            continue
        if str(e) == 'unable to open database file':
            continue
        print "error in database: %s\n %s" % (dbName, str(e))

    print "Completed %d of %d" % (count, len(dbNames)), chr(13),
    sys.stdout.flush()

if errors:
    print "\nConary repository migration completed with errors."
    sys.exit(1)

print "\nConary repository migration complete."
sys.exit(0)
