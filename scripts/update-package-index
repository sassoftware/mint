#!/usr/bin/python
#
# Copyright (c) 2005 rPath, Inc.
#
# All rights reserved
#
import conary
import sqlite3
import versions

from mint import pkgindex
from mint import projects
from repository import netclient
from repository import repository

dbPath = "/srv/mint/data/db"
db = sqlite3.connect(dbPath, timeout = 30000)

pkgIdx = pkgindex.PackageIndexTable(db)
labelsTable = projects.LabelsTable(db)

cu = db.cursor()
cu.execute("SELECT projectId, hostname || '.' || domainname FROM Projects WHERE hidden=0 AND disabled=0")

labels = {}
repositoryMap = {}
projectIds = {}
for r in cu.fetchall():
    projectId, hostname = r

    l, repMap = labelsTable.getLabelsForProject(projectId)
    repositoryMap.update(repMap)
    labels[hostname] = versions.Label(l.keys()[0])
    projectIds[hostname] = projectId

repos = netclient.NetworkRepositoryClient(repositoryMap)

rows = []
for host in repositoryMap.keys():
    try:
        troves = repos.getTroveVersionsByLabel({None: {labels[host]: None}})

    except repository.OpenError, e:
        print "warning: unable to access %s" % host
        continue
        
    pkgs = [x for x in troves.keys() if ':' not in x]
    
    for pkg in pkgs:
        latestVer = sorted(troves[pkg].keys(), reverse = True)[0]
        row = (projectIds[host], pkg, latestVer.asString())
        rows.append(row)

#cu = db.cursor()
try:
    cu.execute("DELETE FROM PackageIndex")
    for row in rows:
        cu.execute("INSERT INTO PackageIndex VALUES (NULL, ?, ?, ?)", *row)
except:
    db.rollback()
    raise
else:
    db.commit()
