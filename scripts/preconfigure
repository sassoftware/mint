#!/bin/bash
#
# Copyright (c) SAS Institute Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


scriptdir=$(dirname $0)

. /etc/sysconfig/pgsql/postgresql-rbuilder
export PGDATA PGPORT

"$scriptdir"/postgres-auto-update || exit 1

# mint database
createuser -SdRU postgres rbuilder &>/dev/null
createdb -U postgres --encoding=UTF8 --owner=rbuilder mint &>/dev/null
"$scriptdir"/rbuilder-database --migrate || exit 1

# jabberd database
createuser -SDRU postgres jabberd &>/dev/null
createdb -U postgres --encoding=UTF8 --owner=jabberd jabberd &>/dev/null && \
    psql -U jabberd -d jabberd -Xqf /usr/share/rbuilder/jabberd/db-setup.pgsql

# rMake 3 database
createuser -SDRU postgres rmake &>/dev/null
createdb -U postgres --encoding=UTF8 --owner=rmake rmake &>/dev/null

# rMake 2 database
createdb -U postgres --encoding=UTF8 --owner=rmake rmake2 &>/dev/null

# SSL certificates
"$scriptdir"/pki-tool --initialize -q 2>&1 >>/var/log/rbuilder/scripts.log


rand_passwd() {
    xxd -ps -l16 /dev/urandom
}

# Configure the local rmake node's identity and add it to the dispatcher's
# whitelist.
ident=/srv/rmake3/worker.ident
if [ ! -f $ident ]
then
  domain=rbuilder.rpath
  username=$(rand_passwd)
  password=$(rand_passwd)
  echo "xmppPermit ${username}@${domain}" >> /etc/rmake3/server.d/21_whitelist.conf

  ident_tmp=$(mktemp --tmpdir=$(dirname $ident))
  echo "rbuilder.rpath ${username} ${password}" >> $ident_tmp
  mv $ident_tmp $ident
fi

# Internal password
auth_file=/srv/rbuilder/config/config.d/01_authpass.conf
if [ ! -f $auth_file ]
then
    auth_tmp=$(mktemp --tmpdir=$(dirname $auth_file))
    echo authPass $(rand_passwd) >$auth_tmp
    chown apache:apache $auth_tmp
    mv $auth_tmp $auth_file
fi


exit 0
