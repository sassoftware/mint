#!/usr/bin/python2.4
#
# Copyright (c) 2006 rPath, Inc.
#
# All Rights Reserved
#

import sys
from os import _exit

from conary.conaryclient import mirror
from conary import versions
from conary.repository import netclient
from conary.lib import util, log

from mint import client
from mint.scriptlibrary import SingletonScript

log.setVerbosity(log.DEBUG)
sys.excepthook = util.genExcepthook(debug=True)

class MirrorInbound(SingletonScript):

    def handle_args(self):
        if len(sys.argv) < 2:
            return False
        return True

    def usage(self):
        print "usage: %s <url to rBuilder server>" % self.name
        return 1

    def action(self):
        client = client.MintClient(sys.argv[1])
        cfg = mirror.MirrorConfiguration()

        mirroredLabels = client.getInboundLabels()

        for label in mirroredLabels:
            projectId, targetLabelId, sourceUrl, sourceUser, sourcePass = label
            project = client.getProject(projectId)

            labelStr, targetUrl, targetUser, targetPass  = client.getLabel(targetLabelId)
            reposHost = versions.Label(labelStr).getHost()

            cfg.source.repositoryMap = {reposHost: sourceUrl}
            cfg.source.user.addServerGlob(reposHost, sourceUser, sourcePass)

            cfg.target.repositoryMap = {reposHost: targetUrl}
            cfg.target.user.addServerGlob(reposHost, targetUser, targetPass)

            cfg.host = reposHost
            cfg.labels = [versions.Label(project.getLabel())]

            sourceRepos = netclient.NetworkRepositoryClient(cfg.source.repositoryMap,
                                      cfg.source.user,
                                      entitlementDir = cfg.entitlementDirectory)

            targetRepos = netclient.NetworkRepositoryClient(cfg.target.repositoryMap,
                                      cfg.target.user,
                                      entitlementDir = cfg.entitlementDirectory)

            count = mirror.mirrorRepository(sourceRepos, targetRepos, cfg, False,
                                     False, False)
            while count:
                count = mirror.mirrorRepository(sourceRepos, targetRepos, cfg, False,
                                         False, False)
            
        return 0

if __name__ == "__main__":
    mi = MirrorInbound()
    _exit(mi.run())
