#!/usr/bin/python

import os, sys
import time

from conary import versions
from conary.conarycfg import ConfigFile
from conary.conaryclient.cmdline import parseTroveSpec

from mint import client
from mint.distro import jsversion
from mint.jobs import DuplicateJob
from mint import releasetypes

class RBuilderShellConfig(ConfigFile):
    serverUrl = None

class CreateRelease:
    def usage(self):
        print "Usage: %s <project name> <trove spec> <image type>" % sys.argv[0]

        print "\n<trove spec> is a fully-qualified (full-version) trove specification"
        print "<image type> is one of ", ", ".join(x.lower() for x in releasetypes.validImageTypes.keys())
        return 1

    def handle_args(self):
        if len(sys.argv) < 4:
            return False
        self.projectName = sys.argv[1]
        self.troveSpec = sys.argv[2]
        self.imageType = sys.argv[3]
        return True

    def action(self):
        mc = client.MintClient(self.cfg.serverUrl)
        project = mc.getProjectByHostname(self.projectName)
        release = mc.newRelease(project.id, project.name)

        n, v, f = parseTroveSpec(self.troveSpec)
        assert(n and v and f)
        v = versions.VersionFromString(v)
        v.resetTimeStamps(0)
        release.setTrove(n, v.freeze(), f.freeze())

        assert(self.imageType.upper() in releasetypes.validImageTypes)
        release.setImageTypes([releasetypes.validImageTypes[self.imageType.upper()]])

        job = mc.startImageJob(release.id)
        print "Release %d job started (job id %d)." % (release.id, job.id)

    def run(self):
        if not self.handle_args():
            self.usage()
            sys.exit(True)

        self.action()
        return True

    def __init__(self):
        self.cfg = RBuilderShellConfig()
        if os.environ.has_key("HOME"):
            self.cfg.read(os.environ["HOME"] + "/" + ".rbrc", exception=False)

        assert(self.cfg.serverUrl)


if __name__ == "__main__":
    cr = CreateRelease()
    os._exit(cr.run())
