#!/usr/bin/python
#
# Copyright (c) 2006 rPath, Inc.
#
# All rights reserved
#

######
#
# Set these values as needed
#
RBO_SERVER = 'www.rpath.com'
RBO_PORT = 80
DEST_DIR = '/tmp/rbo_reports'
DB_DRIVER = 'sqlite'
DB_PATH = '/tmp/rbo_reports/rboreports.sql'
######
import os, socket, sys, time

# override defaults with command line args
if len(sys.argv) > 1:
    RBO_SERVER = sys.argv[1]
if len(sys.argv) > 2:
    RBO_PORT = sys.argv[2]
if len(sys.argv) > 3:
    DEST_DIR = sys.argv[3]
if len(sys.argv) > 4:
    DB_DRIVER = sys.argv[4]
if len(sys.argv) > 5:
    DB_PATH = sys.argv[5]

# set up import resolution environment
parDir = '/'.join(os.path.realpath(__file__).split('/')[:-2])
mintPath = os.getenv('MINT_PATH', parDir)
if mintPath not in sys.path:
    sys.path.insert(0, mintPath)

conaryPath = os.getenv('CONARY_PATH', parDir)
if conaryPath not in sys.path:
    sys.path.insert(0, conaryPath)
# end set up import resolution environment

from mint.mint import MintClient
from conary import dbstore

def logSummary(db, mc):
    cu = db.cursor()
    try:
        cu.execute("SELECT * FROM MetricMap")
    except:
        cu.execute("""CREATE TABLE MetricMap(metricId %(PRIMARYKEY)s,
                                             metric)""" % db.keywords)
        cu.execute("""CREATE TABLE Reports(metricId INT,
                                           value INT,
                                           timestamp INT)""")
    timeStamp = time.time()
    report = mc.getReport('site_summary')
    for key, value in report['data']:
        # there are empty lines (for spacing) in the data. don't log them.
        if key:
            cu.execute("SELECT metricId FROM MetricMap WHERE metric=?", key)
            res = cu.fetchall()
            if res:
                metricId = res[0][0]
            else:
                cu.execute("INSERT INTO MetricMap (metric) VALUES(?)", key)
                cu.execute("SELECT metricId FROM MetricMap WHERE metric=?",
                           key)
                metricId = cu.fetchall()[0][0]
            cu.execute("INSERT INTO Reports VALUES(?, ?, ?)",
                       metricId, value, timeStamp)
    db.commit()

def touchDir(dirPath):
    # a rudimentary function to ensure a directory exists. it will not
    # walk up the dir chain because presumably the script won't have
    # permissions on higher level directories
    try:
        os.stat(dirPath)
    except OSError, e:
        if e.errno != 2:
            raise
        os.mkdir(dirPath)

try:
    mc = MintClient("http://mintauth:mintpass@%s:%s/xmlrpc-private" % \
                    (RBO_SERVER, RBO_PORT))

    db = dbstore.connect(DB_PATH, DB_DRIVER)

    dateStr = ''.join(["%02d" % x for x in time.localtime(time.time())[:3]])

    logSummary(db, mc)

    reports = {}
    for report, title in mc.listAvailableReports().items():
        touchDir(DEST_DIR + '/' + report)
        destFile = open(DEST_DIR + '/' + report + '/' + \
                        report + '_' + dateStr + '.pdf', 'w')
        try:
            destFile.write(mc.getReportPdf(report))
        finally:
            destFile.close()

except socket.error:
    print >> sys.stderr, \
          "Cannot connect to http:%s:%s, please check your settings" % \
          (RBO_SERVER, RBO_PORT)
