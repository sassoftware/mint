%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This is a temporary file that will contain drafts of any text required for
the public website.  Once any text has been reviewed and approved, it will
be removed from this file and integrated into Mint proper.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Conary configuration for users (always displayed)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

*** FIXME -- add generic pointer to Conary docs; cdtd? ***

You have two options available to you if you want to install software from
this project:

    o You can perform an installation by specifying this project's label as
      part of the conary command

    o You can configure Conary to automatically search this project's label
      so that subsequent conary commands need not explicitly specify it

Which option should I choose?

    It really depends on what your long-term expectations are with respect
to this project.

    If this project has only one trove that interests you, specify the
label as part of the conary command.  Note that this does *not* prevent
Conary from accessing this project's repository to find (and install)
updates to the software you install -- Conary takes care of that for you.

    On the other hand, if this project has lots of interesting troves and
you expect that you'll be coming back from time to time to see what
newly-available software there is, you should configure Conary to
automatically search this project's label.

*How do I do it?*

*Specifying This Project's Label as Part of the Conary command*

    Use the following command format to specify this project's label when
issuing a conary update command:

conary update <trove>=[this project's label]

(Where <trove> represents the name of the trove to be installed.)

*Configuring Conary to Automatically Search this Project's Label*

    To configure Conary to automatically search this project's label you
must use a text editor to add the label to Conary's main configuration
file, /etc/conaryrc.

    NOTE: You must be the root user (either by logging in as root, or by
using the su command) to edit this file.

    The option you must modify is installLabelPath.  This option contains
the list of labels that Conary searches when performing the initial
installation of a trove.  The order of labels in the list determines
the order in which they will be searched.

    You can display the current installLabelPath setting using the
following command:

conary config | grep installLabelPath

If this project's label is already be included in your system's
installLabelPath, you don't need to make any changes at all -- just install
the desired trove using the "conary update" command shown at the end of
this page.

    However, if this project's label is not currently included in your
system's installLabelPath, you must add it.

    Using the text editor of your choice, open /etc/conaryrc, and find the
installLabelPath line.  At this point, you must decide where in the list to
place this project's label.

    In most cases, you can just add the project's label to the end of the
list (Note: Even though it can be quite long, the list *must* remain on one
line):

installLabelPath <label1> ... <labelN> [this project's label]

    This approach would not work if one or more labels in the list had
troves with the same names as those in the project's label.  In that case,
this project's label should be inserted before the labels with the
same-named troves:

installLabelPath [this project's label] <label1> ... <labelN>

    Once you've added the project's label, the Conary command you'll use to
install trove's from the project's repository takes the form:

conary update <trove>

(Where <trove> represents the name of the trove to be installed.)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Conary configuration for developers (displayed only for project members)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
*Setting up Your Conary Build Environment*

You will need the following pieces of information in order to start
building packages for this project:

    o Build Label: [this project's label]

    o Repository URL: [this project's repo url with <username>:<password>
      embedded]

(Note that you must replace <username> and <password> with your rBuilder
Online username and password, respectively.)

*Getting Started*

If you're new to packaging with Conary, you need to create some directories
and Conary configuration files; there are many different ways to do this,
but the following approach works equally well when packaging for single or
multiple projects.

*Creating Directories*

First, you must create a directory tree that will contain all the files
related to this project.  The name of the root directory for this tree
should clearly identify the project; some people use the hostname of the
project's repository (<project-name>.rpath.org), while others use just the
project's name -- the choice is yours.

(Hint: If you anticipate packaging software for more than just this
project, you should consider making this project's directory tree a
subdirectory of another directory (conary, for example).  This way, all
your Conary packaging work will be in one place.)

Once you've decided on a name for this project's directory, create it and
populate it with the following subdirectories:

    o src
    o builds
    o cache

The src directory will contain subdirectories (one for each package), each
containing the Conary recipe file (along with any other files that might be
necessary to properly package the software).

The builds directory is where packages will actually be built.

The cache directory is used to store the source archives downloaded during
the build process, avoiding the necessity of repetitively downloading the
same source archive each time a build is attempted.

* Setting Up the conaryrc Files*

Next, it's time to set up Conary's configuration files.  The first file to
consider is /etc/conaryrc -- this file should contain only system-wide
settings; no settings related to packaging should be present in this file.

Create a file called .conaryrc in your home directory.  This file should
contain Conary settings that are specific to you, such as:

    o name
    o contact

Finally, create a file called conaryrc (note the absence of a dot) in your
project's root directory.  This file should contain Conary settings that
are exclusively related to this project, such as:

    o buildLabel ([this project's label])
    o buildPath (full path to the builds subdirectory)
    o lookaside (full path to the cache subdirectory)
    o repositoryMap ([this project's repo URL with <username>:<password> embedded]

Because Conary only reads the conaryrc file when it is in the current
directory, you must create a symlink for it in the src subdirectory.  This
way, when you issue a "cvc newpkg" or "cvc checkout" command in the src
subdirectory, Conary will be configured properly.

Note also that, whenever you issue a "cvc newpkg" or "cvc checkout"
command, you should then create a symlink to ../../conaryrc in the
newly-created directory.  This way future Conary will work as expected
while in that directory as well.

*Signing Packages With OpenPGP Keys*

Conary includes support for signed packages using OpenPGP keys.  Projects
have the option of using this feature or not; ask this project's owners if
you should be signing packages or not.  They will also help you get a
OpenPGP key pair if you do not already have one (or the project requires a
special one).

If this project requires you to sign packages, you must first upload your
public key to this project's repository.  This can be done by logging in to
rBuilder Online and clicking on the "upload a package signing key" link
present below your username in the upper right-hand corner of the page.

Next, you must configure Conary to use your key.  This is done by adding a
signatureKey line (containing your key's fingerprint) to the appropriate
Conary configuration file ($HOME/.conaryrc if the key will be shared
between multiple projects, <project-dir>/conaryrc if the key is specific to
one project).

The following formats are acceptable for the signatureKey setting:

signatureKey            B1EE 5468 2429 249E 3C24  FD50 E55A 1E3D 2417 65F8
signatureKey            B1EE54682429249E3C24FD50E55A1E3D241765F8
signatureKey            E55A1E3D241765F8



Now you're ready to start packaging!  If you're new to packaging with
Conary, you can find an introduction here [link to conary wiki].

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Big picture stuff
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

***Need a 'What Next?' section with links to the following:***

Developers:

    o Learning more about Conary
        - Wiki site
        - Nate's tutorial

    o Using Conary:
        - For basic stuff (Conary Day-to-Day)
        - To package software
        - To create a customized Linux distribution (Nate's tutorial?)

    o Managing project membership
        - Adding new members
        - Removing existing members
        - Orphaning a project

    o Managing mailing lists
        - Adding a list
        - Other functions (regular ol' mailman interface)

    o Build system stuff
        - Downloading Darby
        - Installing/configuring Darby

    o Creating a release

Users:

    o Searching
        - For packages
        - For projects

    o Configuration
        - Adding a repo to installLabelPath

    o Download Releases
