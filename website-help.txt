%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This is a temporary file that will contain drafts of any text required for
the public website.  Once any text has been reviewed and approved, it will
be removed from this file and integrated into Mint proper.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Conary configuration for users (always displayed)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

*** FIXME -- add generic pointer to Conary docs; cdtd? ***

You have two options available to you if you want to install software from
this project:

    o You can perform an installation by specifying this project's label as
      part of the conary command

    o You can configure Conary to automatically search this project's label
      so that subsequent conary commands need not explicitly specify it

Which option should I choose?

    It really depends on what your long-term expectations are with respect
to this project.

    If this project has only one trove that interests you, specify the
label as part of the conary command.  Note that this does *not* prevent
Conary from accessing this project's repository to find (and install)
updates to the software you install -- Conary takes care of that for you.

    On the other hand, if this project has lots of interesting software and
you expect that you'll be coming back from time to time to see what
newly-available software there is, you should configure Conary to
automatically search this project's label.

*How do I do it?*

*Specifying This Project's Label as Part of the Conary command*

    Use the following command format to specify this project's label when
issuing a conary update command:

conary update <trove>=[this project's label]

(Where <trove> represents the name of the trove to be installed.)

*Configuring Conary to Automatically Search this Project's Label*

    To configure Conary to automatically search this project's label you
must use a text editor to add the label to Conary's main configuration
file, /etc/conaryrc.

    NOTE: You must be the root user (either by logging in as root, or by
using the su command) to edit this file.

    The option you must modify is installLabelPath.  This option contains
the list of labels that Conary searches when performing the initial
installation of a trove.  The order of labels in the list determines
the order in which they will be searched.

    You can display the current installLabelPath setting using the
following command:

conary config | grep installLabelPath

If this project's label is already be included in your system's
installLabelPath, you don't need to make any changes at all -- just install
the desired trove using the "conary update" command shown at the end of
this page.

    However, if this project's label is not currently included in your
system's installLabelPath, you must add it.

    Using the text editor of your choice, open /etc/conaryrc, and find the
installLabelPath line.  At this point, you must decide where in the list to
place this project's label.

    In most cases, you can just add the project's label to the end of the
list (Note: Even though it can be quite long, the list *must* remain on one
line):

installLabelPath <label1> ... <labelN> [this project's label]

    This approach would not work if one or more labels in the list had
troves with the same names as those in the project's label.  In that case,
this project's label should be inserted before the labels with the
same-named troves:

installLabelPath [this project's label] <label1> ... <labelN>

    Once you've added the project's label, the Conary command you'll use to
install trove's from the project's repository takes the form:

conary update <trove>

(Where <trove> represents the name of the trove to be installed.)

    You can find more information on using Conary to keep your system
updated here [link to conary day-to-day].

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Conary configuration for developers (displayed only for project members)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
*Setting up Your Conary Build Environment*

You will need the following pieces of information in order to start
building packages for this project:

    o Build Label: [this project's label]

    o Repository URL: [this project's repo url with <username>:<password>
      embedded]

(Note that you must replace <username> and <password> with your rBuilder
Online username and password, respectively.)

*Getting Started*

If you're new to packaging with Conary, you need to create some directories
and Conary configuration files; there are many different ways to do this,
but the following approach works equally well when packaging for single or
multiple projects.

*Creating Directories*

In order to keep all your Conary-related packaging in one place, start by
creating a top-level directory -- in this example, we'll call it
"conary", and put it in our login directory.  All your Conary packaging --
no matter what the project -- will be done under this directory.

Next, you must create a directory tree that will contain all the files
related to this project.  The name of the root directory for this tree
should clearly identify the project; some people use the hostname of the
project's repository, while others use just the project's name -- the
choice is yours.  In this example, we'll use
"<project-name>.rpath.org".

Once you've decided on a name for this project's directory, create it and
populate it with the following subdirectories:

    o ~/conary/<project-name>.rpath.org/src
    o ~/conary/<project-name>.rpath.org/builds
    o ~/conary/<project-name>.rpath.org/cache

The src directory will contain subdirectories (one for each package), each
containing the Conary recipe file (along with any other files that might be
necessary to properly package the software).

The builds directory is where packages will actually be built.

The cache directory is used to store the source archives downloaded during
the build process, avoiding the necessity of repetitively downloading the
same source archive each time a build is attempted.

* Setting Up the conaryrc Files*

Next, it's time to set up Conary's configuration files.  The first file to
consider is /etc/conaryrc -- this file should contain only system-wide
settings; no settings related to packaging should be present in this file.

Create a file called .conaryrc in your home directory.  This file should
contain Conary settings that are specific to you, such as:

    o name
    o contact

Finally, create a file called conaryrc (note the absence of a dot) in your
project's root directory.  This file should contain Conary settings that
are exclusively related to this project, such as:

    o buildLabel ([this project's label])
    o buildPath (full path to the builds subdirectory)
    o lookaside (full path to the cache subdirectory)
    o repositoryMap ([this project's repo URL with <username>:<password> embedded]

Because Conary only reads the conaryrc file when it is in the current
directory, you must create a symlink for it in the src subdirectory.  This
way, when you issue a "cvc newpkg" or "cvc checkout" command in the src
subdirectory, Conary will be configured properly.

Note also that, whenever you issue a "cvc newpkg" or "cvc checkout"
command, you should then create a symlink to ../../conaryrc in the
newly-created directory.  By doing this, conary commands will work as
expected while in that directory as well.

*Signing Packages With OpenPGP Keys*

Conary includes support for signed packages using OpenPGP keys.  Projects
have the option of using this feature or not; ask this project's owners if
you should be signing packages or not.  They will also help you get a
OpenPGP key pair if you do not already have one (or the project requires a
special one).

If this project requires you to sign packages, you must first upload your
public key to this project's repository.  This can be done by logging in to
rBuilder Online and clicking on the "upload a package signing key" link
present below your username in the upper right-hand corner of the page.

Next, you must configure Conary to use your key.  This is done by adding a
signatureKey line (containing your key's fingerprint) to the appropriate
Conary configuration file ($HOME/.conaryrc if the key will be shared
between multiple projects, <project-dir>/conaryrc if the key is specific to
one project).

The following formats are acceptable for the signatureKey setting:

signatureKey            B1EE 5468 2429 249E 3C24  FD50 E55A 1E3D 2417 65F8
signatureKey            B1EE54682429249E3C24FD50E55A1E3D241765F8
signatureKey            E55A1E3D241765F8



Now you're ready to start packaging!  If you're new to packaging with
Conary, you can find an introduction here [link to conary wiki].

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Self-selecting homepage text
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Welcome to rBuilderTM Online -- the site for collaborative open source
development. Using rBuilder Online's free services you can:

*CREATE*

    o Highly-customized system images
    o Easily-tailored system software

Learn more[link to developer page]

*FIND*

    o System images that address your needs
    o Easily-installed software

learn more[link to user page]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Developer page
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

If coding is your thing, you can use rBuilder Online to make a customized
system image (or to package software for other developers to include in
their customized system images).  Here's how to get started:


*1. Create an rBuilder Online Account*

Creating an rBuiilder Online account costs nothing and takes only moments.
Here's what you need to do:

    o Click on the "new account" link at the top right-hand side of the
      rBuilder Online homepage. You'll be taken to a form to fill out. At a
      minimum you must fill in the following fields:

        - Username -- Limit to no more than 16 characters

        - Email Address -- This email address is strictly for rPath to
          contact you regarding rBuilder Online

        - New Password -- The password you'll use to login to your account
          (must be at least 6 characters)

        -  Confirm Password -- Confirmation of the password you entered above.

    o You must check the two checkboxes entitled "I have read and accept
      the Terms of Service" and "I have read and accept the Privacy
      Policy".

    o Finally, click on "Register", and you will receive an email (sent to
      the email address you entered) with a confirmation link. Use your
      browser to follow the link, and you'll then be able to login.


*2. Create (or Join) a Project*

All work on rBuilder Online takes places within a project.  Projects focus
on either:

    o A specific goal (Creation of a system image tailored for a dedicated
      firewall system, for example)

    o Packaging software for inclusion in other projects' system images

You can either create a new project, or join an already-existing project.

If you'd like to create a new project, here's what you need to do:

    o Click on the "Create a new project" link on the right-hand side of
      the rBuilder Online homepage. You'll be taken to a form to fill out.
      At a minimum, you must fill in the following fields:

        - Project Name -- Limit to no more than 16 characters

        - Project Title -- A more human-friendly description of your
          project 

    o Finally, click on "Create".  Your project is now ready!

If you're interested in joining an already-existing project, here's what
you need to do:

    o Search or browse for a project that interests you.

    o Click on the project's name to go to the project's homepage.

    o Click on the "Request to join this project" link.  You'll be taken to
      a page where you can enter any comments you'd like to pass on to the
      project's owner.

    o Finally, click on "Submit".  Your request will be forwarded to the
      project's owner, who can then review your request.


3. Create Your Conary Development Environment

Before you can start committing things to your rBuilder Online repository,
you must first configure Conary.  Here's what you need to do:

    o Go to your project's homepage.

    o Click on the "Create my Conary development environment" link.  You'll
      be taken to a page containing instructions on the directories and
      files you'll need to create.

4. Create Your System Image's Group

To create a customized system image, you must first create a group recipe
that reflects the software comprising your image.

*** Details ***

5. Generate Your System Image

Once you're satisfied with (and have cooked) your group, you can create an
image.

*** Details ***

6. Publish Your System Image

After your newly-create system image has been tested, it's time to make it
available to the general public.

*** Details ***




rBuilder Online for Developers

If coding is your thing, you can use rBuilder Online to host your open
source development project.

What's a project? It can be anything from packaging an app so it'll be
available for use on Conary-based systems, to the creation of an operating
system environment tailored for a specific purpose.

What do you get? Here's the list:

    * A Conary repository dedicated to your project

    * A project-specific hostname (<project-name>.rpath.org)

  * * Project-specific mailing lists: <project-name>@rpath.org

        * <project-name>-commits@rpath.org

        * <project-name>-devel@rpath.org (if desired)

        * <project-name>-bugs@rpath.org (if desired)

    * A no-frills project-specific page (http://<project-name>.rpath.org/
      or http://mint.beta.rpath.org/project/<project-name>/)

    * The ability to create "releases" (downloadable ISO images) with a single mouse click

    * A project membership framework that allows you to keep track of your
      project's members (people able to commit changes to your project's
      repository) and owners (people that can manage project membership as
      well as having commit access)

How much does it cost? Nothing -- rBuilder Online's services are free for
any open source project.

Not the project creating type? If you see an interesting project, offer
your services to the project's owners. If they accept, they'll make you a
member of the project, and you'll be able to start contributing
immediately.

HOW DO I GET STARTED?

First, you need to create your own rBuilder Online account.

To do this, click on the new account link at the top right-hand side of the
rBuilder Online homepage. You'll be taken to a form to fill out. At a
minimum you must fill in the following fields:

    * Username -- Limit to no more than 16 characters

    * Email Address -- This email address is strictly for rPath to contact
      you regarding rBuilder Online

    * New Password -- The password you'll use to login to your account
      (must be at least 6 characters)

    * Confirm Password -- Confirmation of the password you entered above.

Even though it is not required, you should strongly consider filling in the
Contact Information field. Why? Well, if you are going to create a project,
it's highly likely that people will have questions about the project, and
they'll be using the contents of this field to contact you. (Note that
whatever you enter here will be publicly accessible, so you should use
either a URL, or notation such as name at example dot com to make life more
difficult for spammers.)

Finally, you must check the two checkboxes entitled I have read and accept
the Terms of Service and I have read and accept the Privacy Policy.

Click on Register, and you will receive an email (sent to the email address
you entered) with a confirmation link. Use your browser to follow the link,
and you'll then be able to login.  Creating a New Project

If you'd like to create a new project, start the project creation process
by clicking on the Create a new project link. After that, the process is no
more complex than filling in a few text fields and clicking on a Create
button.

After that, creating a customized distribution can be as easy as this!

Joining an Existing Project

If you're interested in joining an already-existing project, go to the
project's homepage. Click on the Request to join link at the bottom of the
page, enter any comments you'd like to make to the project's owners, and
click on Submit. Your request will be forwarded to the project's owners,
who can then review your request.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
User page
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

*** Intro text ***

1. Browse (or Search) for an Interesting Project

*** Details ***

2. Download an Image

*** Details ***

OR:

2. Install Software

*** Details ***

3. Like What you See?  Watch the Project

*** Details ***

OR:

3. Want to Help?  Join the Project

*** Details ***

rBuilder Online for Users

Even if you're not the coding type, rBuilder Online still has a lot to offer.

Already using a Conary-based system? You came to the right place to look
for software -- browse and search your way to the right package, and then
use Conary to install it right off the project's repository.

Looking for a Conary-based system? Search and/or browse the projects on
rBuilder Online, and pick the one that best meets your needs. Download the
release ISO image(s), and you're off and running.

Interested in a particular project? You can keep track of what's going on
by subscribing to the project's mailing list(s), or just use the project's
recent releases RSS feed to find out when there's a new release available.

Of course, all projects need people to help out with testing,
documentation, and the like, so if there's an interesting project, feel
free to create an rBuilder Online account, and offer your services to the
project owners.

HOW DO I GET STARTED?

Use rBuilder Online's browse and search functions to learn more about the
projects and software available.

Found an interesting project? Here are some helpful hints:

    * The project's home page contains the necessary Conary configuration
      information to install the project's software on your Conary-based
      system.

    * You can keep in touch with the project by following developer
      discussion and code commits using the project's mailing lists.

    * The project's release page lists all available releases (which are
      installable ISO images).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Big picture stuff
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

***Need a 'What Next?' section with links to the following:***

Developers:

    o Learning more about Conary
        - Wiki site
        - Nate's tutorial

    o Using Conary:
        - For basic stuff (Conary Day-to-Day)
        - To package software
        - To create a customized Linux distribution (Nate's tutorial?)

    o Managing project membership
        - Adding new members
        - Removing existing members
        - Orphaning a project

    o Managing mailing lists
        - Adding a list
        - Other functions (regular ol' mailman interface)

    o Build system stuff
        - Downloading Darby
        - Installing/configuring Darby

    o Creating a release

Users:

    o Searching
        - For packages
        - For projects

    o Configuration
        - Adding a repo to installLabelPath

    o Download Releases
